# -*- coding: utf-8 -*-
"""Bản sao của ViCTSDXLM-cs_R.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkBt2d7qss1ma7LKDeRphCUldTJegcPu
"""



"""# 1. Thư viện và dữ liệu"""

from google.colab import drive
drive.mount('/content/drive')

! pip install transformers

import torch
import pandas as pd
import numpy as np

# Thu vien transformer cho Classification
from transformers import AutoTokenizer, AutoModelForSequenceClassification, RobertaForSequenceClassification, Trainer, TrainingArguments, BertTokenizer, BertForSequenceClassification, XLMRobertaForSequenceClassification, RobertaForSequenceClassification

# Xu ly label
from sklearn.preprocessing import LabelEncoder
import re
import string

# Metric danh gia 
from sklearn.metrics import f1_score, confusion_matrix, accuracy_score

# Ve do thi
import seaborn as sn
import matplotlib.pyplot as plt





# Xay dung data de fit vao mo hinh 
class BuildDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

# Doc du lieu

train_test = pd.read_csv("UIT-ViCTSD_train.csv")
dev = pd.read_csv("UIT-ViCTSD_valid.csv")
# test = pd.read_csv("UIT-ViCTSD_test_text.csv")

from sklearn.model_selection import train_test_split
train, test = train_test_split(train_test, test_size=0.2, random_state=42)

X_train = train['Comment']
y_train = train['Topic'].values

X_dev = dev['Comment']
y_dev = dev['Topic'].values

X_test = test['Comment']
y_test = test['Topic'].values

print(len(train))
print(len(dev))
print(len(test))

train['Topic'].value_counts()

def preprocess_and_tokenize(data):   
 
     #Remove các ký tự kéo dài: vd: đẹppppppp
    data = re.sub(r'([A-Z])\1+', lambda m: m.group(1).upper(), data, flags=re.IGNORECASE)
    
    # Chuyển thành chữ thường
    data = data.lower()

    #remove urls
    data = re.sub(r'http\S+', '', data)
    
    #remove hashtags và tag
    data= re.sub(r"(#[\d\w\.]+)", '', data)
    data= re.sub(r"(@[\d\w\.]+)", '', data)

    # Chuyển dấu câu thành khoảng trắng
    translator = str.maketrans(string.punctuation, ' ' * len(string.punctuation))
    data = data.translate(translator)
    
    #Xử lý emoj
    replace_list = {
        #Quy các icon về 7 loại emoj:'Disgust', 'Enjoyment', 'Surprise', 'Sadness', 'Anger', 'Fear'
        ":))": " Enjoyment ",":)))": " Enjoyment ","😄": " Enjoyment ", "😆": " Enjoyment ", "😂": " Enjoyment ",'🤣': ' Enjoyment ', '😊': ' Enjoyment ',
        "😍": " Enjoyment ", "😘": " Enjoyment ", "😗": " Enjoyment ","😙": " Enjoyment ", "😚": " Enjoyment ", "🤗": " Enjoyment ",
        "😇": " Enjoyment ", "😝": " Enjoyment ",  "😋": " Enjoyment ","💕": " Enjoyment ", "🧡": " Enjoyment ",'💞':' Enjoyment ',
        '💓': ' Enjoyment ', '💗': ' Enjoyment ','👍': ' Enjoyment ', '❣': ' Enjoyment ','☀': ' Enjoyment ',
        '😳': ' Surprise ', '😲': ' Surprise ', '😯': ' Surprise ', '😣': ' Sadness Fear ',
        '😢': ' Sadness Fear ', '😢': ' Sadness Fear ', '😭': ' Sadness Fear ', '😟': ' Sadness Fear ', '😢': ' Sadness Fear ',
        '😓': ' Sadness Fear ', '😞': ' Sadness ', '😔': ' Sadness ', '☹️': ' Sadness ', ':((': ' Sadness ',
        ':(((': ' Sadness ', '🙁': ' Sadness ', '😤': ' Anger ', '😠': ' Anger ', '😡': ' Anger ',
        '😒': ' Anger ', '😨': ' Disgust ', '🤢': ' Disgust ', '😧': ' Surprise ',}

    for k, v in replace_list.items():
        data = data.replace(k, v)
    
    #remove khoảng trắng dư thừa ở đầu và cuối chuỗi
    data = data.strip()
    return data

X_train_copus = []
for i in range(0,X_train.shape[0]):
  cmt = preprocess_and_tokenize(X_train[i])
  X_train_copus.append(cmt)

X_dev_copus = []
for i in range(0,X_dev.shape[0]):
  cmt = preprocess_and_tokenize(X_dev[i])
  X_dev_copus.append(cmt)

X_test_copus = []
for i in range(0,X_test.shape[0]):
  cmt = preprocess_and_tokenize(X_test[i])
  X_test_copus.append(cmt)

# encoding label 
le = LabelEncoder()
le.fit(y_train)

"""## XLM_R"""

# Khai bao pre-trained
xlm_model = XLMRobertaForSequenceClassification.from_pretrained("xlm-roberta-base", num_labels = 10)
xlm_tokenizer = AutoTokenizer.from_pretrained("xlm-roberta-base")

train_encodings = xlm_tokenizer(X_train_copus, truncation=True, padding=True, max_length=40)
dev_encodings = xlm_tokenizer(X_dev_copus, truncation=True, padding=True, max_length=40)
test_encodings = xlm_tokenizer(X_test_copus, truncation=True, padding=True, max_length=40)

y_train_encoding = le.transform(y_train)
y_dev_encoding = le.transform(y_dev)
y_test_encoding = le.transform(y_test)

train_dataset = BuildDataset(train_encodings, y_train_encoding)
dev_dataset = BuildDataset(dev_encodings, y_dev_encoding)
test_dataset = BuildDataset(test_encodings, y_test_encoding)

training_args = TrainingArguments(
    output_dir='./results',          
    num_train_epochs=5,              
    per_device_train_batch_size=16,  
    per_device_eval_batch_size=16,   
    warmup_steps=500,                
    weight_decay=0.01,
    no_cuda=False
)

xlm_trainer = Trainer(
    model=xlm_model,                         
    args=training_args,                  
    train_dataset=train_dataset,         
    eval_dataset=dev_dataset             
)

# huan luyen mo hinh

xlm_trainer.train()

# Du doan 
y_pred_classify = xlm_trainer.predict(test_dataset)

y_pred = np.argmax(y_pred_classify.predictions, axis=-1)

y_true = y_test_encoding

cf = confusion_matrix(y_true, y_pred)
print(cf)

evaluation = round(f1_score(y_true, y_pred, average='micro'),4)*100

print("F1 - micro: " + str(evaluation))

evaluation = round(f1_score(y_true, y_pred, average='macro'),4)*100
print("F1 - macro: " + str(evaluation))

evaluation = round(f1_score(y_true, y_pred, average='weighted'),4)*100
print("F1 - Weighted : " + str(evaluation))

# Ve ma tran nham lan
df_cm = pd.DataFrame(cf, index = np.unique(y_train),
                  columns = np.unique(y_train))

sn.heatmap(df_cm, annot=True, cmap="Greys",fmt='g', cbar=True, annot_kws={"size": 10})

from sklearn.metrics import classification_report
target_name = ['0','1']
print(classification_report(y_true, y_pred, target_names=target_name))