# -*- coding: utf-8 -*-
"""VSMEC.XLM_R.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ygO6HtYbpuOv7auZJl4VJ_tqgEy5tXBp

# 1. Thư viện và dữ liệu
"""

from google.colab import drive
drive.mount('/content/drive')

! pip install transformers

import torch
import pandas as pd
import numpy as np

# Thu vien transformer cho Classification
from transformers import AutoTokenizer, AutoModelForSequenceClassification, RobertaForSequenceClassification, Trainer, TrainingArguments, BertTokenizer, BertForSequenceClassification, XLMRobertaForSequenceClassification, RobertaForSequenceClassification

# Xu ly label
from sklearn.preprocessing import LabelEncoder

# Metric danh gia 
from sklearn.metrics import f1_score, confusion_matrix, accuracy_score

# Ve do thi
import seaborn as sn
import matplotlib.pyplot as plt







train['Constructiveness'].value_counts()

# encoding label 
le = LabelEncoder()
le.fit(y_train)

"""## XLM_R"""

# Khai bao pre-trained
xlm_model = XLMRobertaForSequenceClassification.from_pretrained("xlm-roberta-base", num_labels = 7)
xlm_tokenizer = AutoTokenizer.from_pretrained("xlm-roberta-base")

train_encodings = xlm_tokenizer(X_train_copus, truncation=True, padding=True, max_length=40)
dev_encodings = xlm_tokenizer(X_dev_copus, truncation=True, padding=True, max_length=40)
test_encodings = xlm_tokenizer(X_test_copus, truncation=True, padding=True, max_length=40)

y_train_encoding = le.transform(y_train)
y_dev_encoding = le.transform(y_dev)
y_test_encoding = le.transform(y_test)

train_dataset = BuildDataset(train_encodings, y_train_encoding)
dev_dataset = BuildDataset(dev_encodings, y_dev_encoding)
test_dataset = BuildDataset(test_encodings, y_test_encoding)

training_args = TrainingArguments(
    output_dir='./results',          
    num_train_epochs=5,              
    per_device_train_batch_size=16,  
    per_device_eval_batch_size=16,   
    warmup_steps=500,                
    weight_decay=0.01,
    no_cuda=False
)

xlm_trainer = Trainer(
    model=xlm_model,                         
    args=training_args,                  
    train_dataset=train_dataset,         
    eval_dataset=dev_dataset             
)

# huan luyen mo hinh

xlm_trainer.train()

# Du doan 
y_pred_classify = xlm_trainer.predict(test_dataset)

y_pred = np.argmax(y_pred_classify.predictions, axis=-1)

# Danh gia mo hinh
y_true = y_test_encoding

cf = confusion_matrix(y_true, y_pred)
print(cf)

evaluation = f1_score(y_true, y_pred, average='micro')

print("F1 - micro: " + str(evaluation))

evaluation = f1_score(y_true, y_pred, average='macro')
print("F1 - macro: " + str(evaluation))

# Ve ma tran nham lan
df_cm = pd.DataFrame(cf, index = np.unique(y_train),
                  columns = np.unique(y_train))

sn.heatmap(df_cm, annot=True, cmap="Greys",fmt='g', cbar=True, annot_kws={"size": 10})

from sklearn.metrics import classification_report
target_name = ['Enjoyment','Disgust','Other ','Sadness','Anger ','Fear ','Surprise  ']
print(classification_report(y_true, y_pred, target_names=target_name))